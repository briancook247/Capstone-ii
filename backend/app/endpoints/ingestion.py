"""
Capstone II STG-452
Authors: Brian Cook, Dima Bondar, James Green
Professor: Bill Hughes
Our Own Work
License: MIT
"""

from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel, HttpUrl
from app.dependencies import verify_token
from app.utils import scraper
from app.models.document import DocumentInDB

router = APIRouter(prefix="/ingest", tags=["ingestion"])

class IngestPayload(BaseModel):
    api_url: HttpUrl

@router.post("/")
async def ingest_api_docs(payload: IngestPayload, user=Depends(verify_token)):
    """
    Endpoint to ingest API documentation by scraping the provided URL.
    Saves the scraped content to the database.
    """
    try:
        content = await scraper.fetch_and_scrape(payload.api_url)
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Failed to ingest docs: {str(e)}")
    
    document = DocumentInDB(
        id=1,  # In a real application, this would be auto-generated by the database.
        api_url=str(payload.api_url),
        content=content,
        user_email=user.get("sub")
    )
    # Database insertion code goes here.
    return {"message": "API documentation ingested", "document_id": document.id}
